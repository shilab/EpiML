pseudo_mat_stand <- scale(pseudo_mat);
pseudo_mat
grep("subpseudo",colnames(pseudo_allmat)
)
colnames(pseudo_mat_stand_epi)
single_new <- features[,k,drop=FALSE];
new <- features[,(k+1):ncol(features)];
new_combine <- cbind(new,single_new);
pseudo_allmat <- transform(new_combine,subpseudo=new_combine[,1:(ncol(features)-k)] * new_combine[,ncol(new_combine)]);
colnames(pseudo_allmat) <- paste(colnames(pseudo_allmat), colnames(single_new),sep = "*");
pseudo_mat <- pseudo_allmat[,grep("subpseudo",colnames(pseudo_allmat)),drop=FALSE];
pseudo_mat <- as.matrix(pseudo_mat);
pseudo_mat_stand <- scale(pseudo_mat);
epi_index <- which(abs(t(new_y_in) %*% pseudo_mat_stand/(nrow(pseudo_mat_stand)-1)) > 0.20);
pseudo_mat_stand_epi <- pseudo_mat[,epi_index,drop=FALSE];
# pseudo_mat_stand_epi <- pseudo_mat_stand[,epi_index,drop=FALSE];
sig_epi_sum <- c(sig_epi_sum,colnames(pseudo_mat_stand_epi));
colnames(pseudo_mat_stand_epi)
sig_epi_sum <- NULL;
for(k in 1:(ncol(features)-1)){
single_new <- features[,k,drop=FALSE];
new <- features[,(k+1):ncol(features)];
new_combine <- cbind(new,single_new);
pseudo_allmat <- transform(new_combine,subpseudo=new_combine[,1:(ncol(features)-k)] * new_combine[,ncol(new_combine)]);
colnames(pseudo_allmat) <- paste(colnames(pseudo_allmat), colnames(single_new),sep = "*");
pseudo_mat <- pseudo_allmat[,grep("subpseudo",colnames(pseudo_allmat)),drop=FALSE];
pseudo_mat <- as.matrix(pseudo_mat);
pseudo_mat_stand <- scale(pseudo_mat);
epi_index <- which(abs(t(new_y_in) %*% pseudo_mat_stand/(nrow(pseudo_mat_stand)-1)) > 0.20);
pseudo_mat_stand_epi <- pseudo_mat[,epi_index,drop=FALSE];
# pseudo_mat_stand_epi <- pseudo_mat_stand[,epi_index,drop=FALSE];
sig_epi_sum <- c(sig_epi_sum,colnames(pseudo_mat_stand_epi));
}
res <- matrix(c(sig_main,sig_epi_sum),ncol=1);
res <- gsub("subpseudo.","",res)
res
sig_main
pseudo_mat_stand
pseudo_mat_stand_epi
colnames(pseudo_mat_stand_epi)
colnames(pseudo_allmat)
k<-1
single_new <- features[,k,drop=FALSE];
new <- features[,(k+1):ncol(features)];
new_combine <- cbind(new,single_new);
pseudo_allmat <- transform(new_combine,subpseudo=new_combine[,1:(ncol(features)-k)] * new_combine[,ncol(new_combine)]);
colnames(pseudo_allmat) <- paste(colnames(pseudo_allmat), colnames(single_new),sep = "*");
pseudo_mat <- pseudo_allmat[,grep("subpseudo",colnames(pseudo_allmat)),drop=FALSE];
pseudo_mat <- as.matrix(pseudo_mat);
pseudo_mat_stand <- scale(pseudo_mat);
epi_index <- which(abs(t(new_y_in) %*% pseudo_mat_stand/(nrow(pseudo_mat_stand)-1)) > 0.20);
pseudo_mat_stand_epi <- pseudo_mat[,epi_index,drop=FALSE];
# pseudo_mat_stand_epi <- pseudo_mat_stand[,epi_index,drop=FALSE];
sig_epi_sum <- c(sig_epi_sum,colnames(pseudo_mat_stand_epi));
colnames(pseudo_allmat)
pseudo_mat
sig_epi_sum
###### Epistasis effect-single locus:
sig_epi_sum <- NULL;
for(k in 1:(ncol(features)-1)){
single_new <- features[,k,drop=FALSE];
new <- features[,(k+1):ncol(features)];
new_combine <- cbind(new,single_new);
pseudo_allmat <- transform(new_combine,subpseudo=new_combine[,1:(ncol(features)-k)] * new_combine[,ncol(new_combine)]);
colnames(pseudo_allmat) <- paste(colnames(pseudo_allmat), colnames(single_new),sep = "*");
pseudo_mat <- pseudo_allmat[,grep("subpseudo",colnames(pseudo_allmat)),drop=FALSE];
pseudo_mat <- as.matrix(pseudo_mat);
pseudo_mat_stand <- scale(pseudo_mat);
epi_index <- which(abs(t(new_y_in) %*% pseudo_mat_stand/(nrow(pseudo_mat_stand)-1)) > 0.20);
pseudo_mat_stand_epi <- pseudo_mat[,epi_index,drop=FALSE];
# pseudo_mat_stand_epi <- pseudo_mat_stand[,epi_index,drop=FALSE];
sig_epi_sum <- c(sig_epi_sum,colnames(pseudo_mat_stand_epi));
}
res <- matrix(c(sig_main,sig_epi_sum),ncol=1);
res <- gsub("subpseudo.","",res)
res
new_matrix <- NULL;
for(i in 1:nrow(res)){
if(length(grep("\\*",res[i,1])) == 0){
tmp1 = features[,(as.numeric(res[i,1])),drop=F];
colnames(tmp1) <- res[i,1];
new_matrix <-cbind(new_matrix,tmp1);
}
if(length(grep("\\*",res[i,1])) == 1){
indexes <- strsplit(res[i,1],"\\*");
tmp1 <- features[,as.numeric(indexes[[1]][1]),drop=F] * features[,as.numeric(indexes[[1]][2]),drop=F];
colnames(tmp1) <- res[i,1];
new_matrix <- cbind(new_matrix,tmp1);
}
}
new_matrix <- as.matrix(new_matrix);
warnings()
grep("\\*",res[1,1])
grep("\\*",res[20,1])
i<-1
tmp1 = features[,(as.numeric(res[i,1])),drop=F];
colnames(tmp1) <- res[i,1];
new_matrix <-cbind(new_matrix,tmp1);
tmp1
colnames(tmp1)
colnames(tmp1) <- res[i,1];
colnames(tmp1)
View(res)
workspace <- '~/Desktop/samples/'
x_filename <- 'Geno.txt'
y_filename <- 'Pheno.txt'
# load library
library('BhGLM');
library('Matrix');
library('foreach');
library('glmnet');
source('cv.bh.R');
features <- read.table(file.path(workspace, x_filename),header=T,row.names  = 1);
features <- as.matrix(features);
colnames(features) = seq(1,ncol(features));
pheno <- read.table(file.path(workspace, y_filename),header=F);
pheno <- as.matrix(pheno);
View(features)
View(pheno)
geno_stand <- scale(features);
new_y <- scale(pheno);
new_y_in = new_y[,1,drop=F];
View(geno_stand)
new_y <- scale(pheno);
geno_stand <- scale(features);
pheno <- as.matrix(pheno);
geno_stand <- scale(features);
new_y <- scale(pheno);
View(pheno)
pheno <- read.table(file.path(workspace, y_filename),header=T,row.names  = 1);
pheno <- as.matrix(pheno);
geno_stand <- scale(features);
new_y <- scale(pheno);
new_y_in = new_y[,1,drop=F];
View(new_y_in)
View(new_y)
View(geno_stand)
# load library
library('BhGLM');
library('Matrix');
library('foreach');
library('glmnet');
source('cv.bh.R');
workspace <- '~/Desktop/samples/'
x_filename <- 'Geno.txt'
y_filename <- 'Pheno.txt'
category <- 'Gene'
s0 <- 0.03;
s1 <- 0.5;
nFolds <- 5
seed <- 28213
cat('ssLasso parameters:', '\n')
cat('\tworkspace:', workspace, '\n')
cat('\tx_filename:', x_filename, '\n')
cat('\ty_filename:', y_filename, '\n')
cat('\tCategory:', category, '\n')
cat('\tnFolds:', nFolds, '\n')
cat('\tseed:', seed, '\n')
set.seed(seed)
cat('reading data','\n')
x <- read.table(
file = file.path(workspace, x_filename),
header = TRUE,
check.names = FALSE,
row.names = 1
)
sprintf('x size: (%d, %d)', nrow(x), ncol(x))
x <- as.matrix(x)
y <- read.table(
file = file.path(workspace, y_filename),
header = TRUE,
row.names = 1
)
sprintf('y size: (%d, %d)', nrow(y), ncol(y))
y <- as.matrix(y)
# preprocessing for different job categories
x_preprocessed <- NULL
y_preprocessed <- NULL
cat('Filter data with missing data', '\n')
x_filtered <- t(na.omit(t(x)))
if (category == 'Gene') {
# Gene data is categorical, no normlization
x_preprocessed <- x_filtered
y_preprocessed <- scale(y)
} else if (category == 'microRNA') {
cat('Quantile normalization', '\n')
x_filtered_normed <- x_filtered
for (sl in 1:ncol(x_filtered_normed)) {
mat = matrix(as.numeric(x_filtered_normed[, sl]), 1)
mat = t(apply(mat, 1, rank, ties.method = "average"))
mat = qnorm(mat / (nrow(x_filtered_normed) + 1))
x_filtered_normed[, sl] = mat
}
x_preprocessed <- x_filtered_normed
y_preprocessed <- scale(y)
} else{
# no filtering and no normlization
x_preprocessed <- x
y_preprocessed <- scale(y)
}
features <- x_preprocessed
pheno <- y_preprocessed
# ssLASSO requires to scale y
new_y <- scale(pheno);
new_y_in <- new_y[,1,drop=F];
View(new_y_in)
View(pheno)
colnames(x)
# load library
library('BhGLM');
library('Matrix');
library('foreach');
library('glmnet');
source('cv.bh.R');
workspace <- '~/Desktop/samples/'
x_filename <- 'Geno.txt'
y_filename <- 'y_preprocessed.txt'
category <- 'Gene'
s0 <- 0.03;
s1 <- 0.5;
nFolds <- 5
seed <- 28213
cat('ssLasso parameters:', '\n')
cat('\tworkspace:', workspace, '\n')
cat('\tx_filename:', x_filename, '\n')
cat('\ty_filename:', y_filename, '\n')
cat('\tCategory:', category, '\n')
cat('\tnFolds:', nFolds, '\n')
cat('\tseed:', seed, '\n')
set.seed(seed)
cat('reading data','\n')
x <- read.table(
file = file.path(workspace, x_filename),
header = TRUE,
check.names = FALSE,
row.names = 1
)
sprintf('x size: (%d, %d)', nrow(x), ncol(x))
x <- as.matrix(x)
y <- read.table(
file = file.path(workspace, y_filename),
header = TRUE,
row.names = 1
)
sprintf('y size: (%d, %d)', nrow(y), ncol(y))
y <- as.matrix(y)
# preprocessing for different job categories
x_preprocessed <- NULL
y_preprocessed <- NULL
# for x preprocess
cat('Filter data with missing data', '\n')
x_filtered <- t(na.omit(t(x)))
if (category == 'Gene') {
# Gene data is categorical, no normlization
x_preprocessed <- x_filtered
} else if (category == 'microRNA') {
cat('Quantile normalization', '\n')
x_filtered_normed <- x_filtered
for (sl in 1:ncol(x_filtered_normed)) {
mat = matrix(as.numeric(x_filtered_normed[, sl]), 1)
mat = t(apply(mat, 1, rank, ties.method = "average"))
mat = qnorm(mat / (nrow(x_filtered_normed) + 1))
x_filtered_normed[, sl] = mat
}
x_preprocessed <- x_filtered_normed
} else{
# no filtering and no normlization
x_preprocessed <- x
}
# for y preprocess
y_preprocessed <- scale(y)
# for y preprocess
y_preprocessed <- scale(y)
cat('reading data','\n')
x <- read.table(
file = file.path(workspace, x_filename),
header = TRUE,
check.names = FALSE,
row.names = 1
)
sprintf('x size: (%d, %d)', nrow(x), ncol(x))
x <- as.matrix(x)
y <- read.table(
file = file.path(workspace, y_filename),
header = TRUE,
row.names = 1
)
sprintf('y size: (%d, %d)', nrow(y), ncol(y))
y <- as.matrix(y)
# load library
library('BhGLM');
library('Matrix');
library('foreach');
library('glmnet');
source('cv.bh.R');
workspace <- '~/Desktop/samples/'
x_filename <- 'Geno.txt'
y_filename <- 'y_preprocessed.txt'
category <- 'Gene'
s0 <- 0.03;
s1 <- 0.5;
nFolds <- 5
seed <- 28213
cat('ssLasso parameters:', '\n')
cat('\tworkspace:', workspace, '\n')
cat('\tx_filename:', x_filename, '\n')
cat('\ty_filename:', y_filename, '\n')
cat('\tCategory:', category, '\n')
cat('\tnFolds:', nFolds, '\n')
cat('\tseed:', seed, '\n')
set.seed(seed)
cat('reading data','\n')
x <- read.table(
file = file.path(workspace, x_filename),
header = TRUE,
check.names = FALSE,
row.names = 1
)
sprintf('x size: (%d, %d)', nrow(x), ncol(x))
x <- as.matrix(x)
y <- read.table(
file = file.path(workspace, y_filename),
header = TRUE,
row.names = 1
)
sprintf('y size: (%d, %d)', nrow(y), ncol(y))
y <- as.matrix(y)
# load library
library('BhGLM');
library('Matrix');
library('foreach');
library('glmnet');
source('cv.bh.R');
workspace <- '~/Desktop/samples/'
x_filename <- 'Geno.txt'
y_filename <- 'Pheno.txt'
category <- 'Gene'
s0 <- 0.03;
s1 <- 0.5;
nFolds <- 5
seed <- 28213
cat('ssLasso parameters:', '\n')
cat('\tworkspace:', workspace, '\n')
cat('\tx_filename:', x_filename, '\n')
cat('\ty_filename:', y_filename, '\n')
cat('\tCategory:', category, '\n')
cat('\tnFolds:', nFolds, '\n')
cat('\tseed:', seed, '\n')
set.seed(seed)
cat('reading data','\n')
x <- read.table(
file = file.path(workspace, x_filename),
header = TRUE,
check.names = FALSE,
row.names = 1
)
sprintf('x size: (%d, %d)', nrow(x), ncol(x))
x <- as.matrix(x)
y <- read.table(
file = file.path(workspace, y_filename),
header = TRUE,
row.names = 1
)
sprintf('y size: (%d, %d)', nrow(y), ncol(y))
y <- as.matrix(y)
# preprocessing for different job categories
x_preprocessed <- NULL
y_preprocessed <- NULL
# for x preprocess
cat('Filter data with missing data', '\n')
x_filtered <- t(na.omit(t(x)))
if (category == 'Gene') {
# Gene data is categorical, no normlization
x_preprocessed <- x_filtered
} else if (category == 'microRNA') {
cat('Quantile normalization', '\n')
x_filtered_normed <- x_filtered
for (sl in 1:ncol(x_filtered_normed)) {
mat = matrix(as.numeric(x_filtered_normed[, sl]), 1)
mat = t(apply(mat, 1, rank, ties.method = "average"))
mat = qnorm(mat / (nrow(x_filtered_normed) + 1))
x_filtered_normed[, sl] = mat
}
x_preprocessed <- x_filtered_normed
} else{
# no filtering and no normlization
x_preprocessed <- x
}
# for y preprocess
y_preprocessed <- scale(y)
colnames(x_preprocessed)
col_name<-colnames(x_preprocessed)
colnames(x_preprocessed) = seq(1,ncol(x_preprocessed));
View(x_preprocessed)
cat('reading data','\n')
x <- read.table(
file = file.path(workspace, x_filename),
header = TRUE,
check.names = FALSE,
row.names = 1
)
sprintf('x size: (%d, %d)', nrow(x), ncol(x))
x <- as.matrix(x)
y <- read.table(
file = file.path(workspace, y_filename),
header = TRUE,
row.names = 1
)
sprintf('y size: (%d, %d)', nrow(y), ncol(y))
y <- as.matrix(y)
# preprocessing for different job categories
x_preprocessed <- NULL
y_preprocessed <- NULL
# for x preprocess
cat('Filter data with missing data', '\n')
x_filtered <- t(na.omit(t(x)))
if (category == 'Gene') {
# Gene data is categorical, no normlization
x_preprocessed <- x_filtered
} else if (category == 'microRNA') {
cat('Quantile normalization', '\n')
x_filtered_normed <- x_filtered
for (sl in 1:ncol(x_filtered_normed)) {
mat = matrix(as.numeric(x_filtered_normed[, sl]), 1)
mat = t(apply(mat, 1, rank, ties.method = "average"))
mat = qnorm(mat / (nrow(x_filtered_normed) + 1))
x_filtered_normed[, sl] = mat
}
x_preprocessed <- x_filtered_normed
} else{
# no filtering and no normlization
x_preprocessed <- x
}
# for y preprocess
y_preprocessed <- scale(y)
cat('Main effect estimated using ssLASSO', '\n')
sig_index <- which(abs(t(y_preprocessed) %*% x_preprocessed/(nrow(x_preprocessed)-1)) > 0.20);
sig_index
sig_main <- colname(x_preprocessed)[sig_index];
cat('Main effect estimated using ssLASSO', '\n')
sig_index <- which(abs(t(y_preprocessed) %*% x_preprocessed/(nrow(x_preprocessed)-1)) > 0.20);
sig_main <- col.name(x_preprocessed)[sig_index];
colnames(x_preprocessed)
sig_main <- colnames(x_preprocessed)[sig_index];
sig_main
k<-1
first_single <- x_preprocessed[, k, drop = FALSE]
second_remainder <- x_preprocessed[, (k + 1):ncol(x_preprocessed)]
combine <- cbind(second_remainder, first_single);
first_single
second_remainder
combine
pairwise <- combine[, 1:(ncol(x_preprocessed) - k)] * combine[, ncol(combine)]
pairwise
View(pairwise)
first_single <- x_preprocessed[, k, drop = FALSE]
second_remainder <- x_preprocessed[, (k + 1):ncol(x_preprocessed)]
combine <- cbind(second_remainder, first_single)
pairwise <- second_remainder * first_single
View(second_remainder)
colnames(second_remainder)
View(first_single)
colnames(pairwise)
pairwise <- first_single * second_remainder
first_single <- x_preprocessed[, k, drop = FALSE]
second_remainder <- x_preprocessed[, (k + 1):ncol(x_preprocessed)]
combine <- cbind(second_remainder, first_single)
pairwise <- first_single * second_remainder
View(second_remainder)
colnames(first_single)
single <- x_preprocessed[, k, drop = FALSE]
remainder <- x_preprocessed[, (k + 1):ncol(x_preprocessed)]
pairwise <- remainder * single
colnames(pairwise) <- paste(colnames(remainder), colnames(single), sep = "*")
single <- x_preprocessed[, k, drop = FALSE]
remainder <- x_preprocessed[, (k + 1):ncol(x_preprocessed)]
pairwise <- remainder * single
nrow(single)
nrow(remainder)
remainder * single
combine = cbind(remainder,single)
combine[,1:(ncol(features)-k)] * combine[,ncol(combine)])
combine[,1:(ncol(features)-k)] * combine[,ncol(combine)]
combine[,1:(ncol(x_preprocessed)-k)] * combine[,ncol(combine)]
combine[,1:(ncol(x_preprocessed)-k)] * combine[,ncol(combine)]
combine[,ncol(combine)]
combine[,1:(ncol(x_preprocessed)-k)]
combine[,1:(ncol(x_preprocessed)-k)] == remainder
pairwise <- remainder * matrix(single,ncol=1)
matrix(single,ncol=1)
combine[,ncol(combine)]
single
pairwise <- remainder * list(single)
combine[,ncol(combine)]
single <- x_preprocessed[, k]
single
pairwise <- remainder * single
single <- x_preprocessed[, k]
remainder <- x_preprocessed[, (k + 1):ncol(x_preprocessed)]
pairwise <- remainder * single
ncol(pairwise)
colnames(pairwise)
colnames(pairwise) <- paste(colnames(remainder), colnames(single), sep = "*")
colnames(pairwise)
single
x_preprocessed[, k]
single <- x_preprocessed[, k, drop=F]
single
as.list(single)
single <- x_preprocessed[, k]
remainder <- x_preprocessed[, (k + 1):ncol(x_preprocessed)]
pairwise <- remainder * single
